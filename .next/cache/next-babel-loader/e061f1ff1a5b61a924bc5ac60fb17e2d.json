{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { Component } from 'react';\n\nconst RepresentativesByName = ({\n  json_input\n}) => __jsx(\"div\", null, json_input.officials.map((value, idx) => __jsx(\"li\", {\n  key: idx\n}, value.name)));\n\nconst Coordinates = ({\n  coordinates\n}) => __jsx(\"div\", null, \"lat: \" + coordinates.lat + \"\\nlng: \" + coordinates.lng //coordinates.map((value,idx) => <li key={idx}>{value}</li>)       \n);\n\nclass RepresentativeSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: \"\",\n      coordinates: {\n        lat: \"\",\n        lng: \"\"\n      },\n      reports: {\n        offices: [\"\"],\n        officials: [\"\"]\n      }\n    };\n    this.setAddress = this.setAddress.bind(this);\n    this.setCoordinates = this.setCoordinates.bind(this);\n    this.findRepresentatives = this.findRepresentatives.bind(this); // this.state = { isEmptyState: true, isAddTripState: false  }\n    // this.triggerAddTripState = this.triggerAddTripState.bind(this);\n  }\n\n  setAddress(e) {\n    e.preventDefault(); //if(Number(event.target.value) != NaN)\n\n    this.setState({\n      address: e.target.value\n    });\n  }\n\n  findRepresentatives(e) {\n    e.preventDefault();\n\n    if (this.state.address !== \"\") {\n      //fetch(`https://www.googleapis.com/civicinfo/v2/representatives?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_BOOTSTRAP_URL}&address=${this.state.address}`,{\n      fetch(`https://www.googleapis.com/civicinfo/v2/representatives?key=AIzaSyBe7_ta_1zNod6CsCJI6ssWk64kyO14HZo&address=${this.state.address}`, {\n        method: \"GET\",\n        dataType: \"JSON\",\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n      }).then(response => response.json()).then(data => {\n        // console.log(data);          \n        //console.log(\"coordinates\",this.state.coordinates)\n        this.setState({\n          reports: data\n        });\n        this.setCoordinates();\n      });\n    }\n  }\n\n  setCoordinates() {\n    if (this.state.address !== \"\") {\n      //fetch(`https://maps.googleapis.com/maps/api/geocode/json?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_BOOTSTRAP_URL}&address=${this.state.address}`,{\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBe7_ta_1zNod6CsCJI6ssWk64kyO14HZo&address=${this.state.address}`, {\n        method: \"GET\",\n        dataType: \"JSON\" // headers: {\n        //   \"Content-Type\": \"application/json; charset=utf-8\",\n        // }\n\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          coordinates: {\n            lat: data.results[0].geometry.location.lat,\n            lng: data.results[0].geometry.location.lng\n          }\n        });\n      });\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(\"h1\", null, \"Enter your Address: \", this.state.answer), __jsx(\"input\", {\n      value: this.state.address,\n      onChange: this.setAddress\n    }), __jsx(\"button\", {\n      onClick: this.findRepresentatives\n    }, \"Find\"), __jsx(RepresentativesByName, {\n      json_input: this.state.reports\n    }), __jsx(Coordinates, {\n      coordinates: this.state.coordinates\n    }));\n  }\n\n}\n\nexport default RepresentativeSearch;","map":null,"metadata":{},"sourceType":"module"}