{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/benjamingordon/Documents/X&X/townie/components/MapMarker/index.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\n\nfunction titleCase(string) {\n  var y = string.split(\"_\");\n  y.forEach(function (value, i, array) {\n    array[i] = array[i][0].toUpperCase() + array[i].slice(1);\n  });\n  return y.join(\" \");\n}\n\nexport var MapMarker = function MapMarker(_ref) {\n  _s();\n\n  var output_key = _ref.output_key,\n      key = _ref.key,\n      name = _ref.name,\n      coordinates = _ref.coordinates,\n      site_info = _ref.site_info;\n\n  var _useState = useState(false),\n      isInfoOpen = _useState[0],\n      setIsInfoOpen = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      currentInfoOpen = _useState2[0],\n      setInfoOpen = _useState2[1];\n\n  var toggleInfo = useCallback(function (e) {\n    setIsInfoOpen(function (wasOpen) {\n      return !wasOpen;\n    });\n    setInfoOpen(output_key);\n    console.log(\"name\", output_key);\n  }, [setIsInfoOpen]);\n  return __jsx(\"div\", {\n    className: \"map-marker-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(\"button\", {\n    onClick: toggleInfo,\n    className: \"map-marker\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"map-marker-info\".concat(currentInfoOpen === output_key && isInfoOpen ? ' map-marker-info--active' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, output_key));\n};\n\n_s(MapMarker, \"jDfshDY+O4z9CZ4cf4/oyOsMGqQ=\");\n\n_c = MapMarker;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapMarker\");","map":{"version":3,"sources":["/Users/benjamingordon/Documents/X&X/townie/components/MapMarker/index.jsx"],"names":["React","useState","useCallback","titleCase","string","y","split","forEach","value","i","array","toUpperCase","slice","join","MapMarker","output_key","key","name","coordinates","site_info","isInfoOpen","setIsInfoOpen","currentInfoOpen","setInfoOpen","toggleInfo","e","wasOpen","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;;AAEA,SAASC,SAAT,CAAmBC,MAAnB,EAA0B;AACxB,MAAMC,CAAC,GAAGD,MAAM,CAACE,KAAP,CAAa,GAAb,CAAV;AACAD,EAAAA,CAAC,CAACE,OAAF,CAAU,UAASC,KAAT,EAAgBC,CAAhB,EAAmBC,KAAnB,EAAyB;AACjCA,IAAAA,KAAK,CAACD,CAAD,CAAL,GAAWC,KAAK,CAACD,CAAD,CAAL,CAAS,CAAT,EAAYE,WAAZ,KAA4BD,KAAK,CAACD,CAAD,CAAL,CAASG,KAAT,CAAe,CAAf,CAAvC;AACD,GAFD;AAGA,SAAQP,CAAC,CAACQ,IAAF,CAAO,GAAP,CAAR;AACD;;AAED,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAuD;AAAA;;AAAA,MAApDC,UAAoD,QAApDA,UAAoD;AAAA,MAAxCC,GAAwC,QAAxCA,GAAwC;AAAA,MAAnCC,IAAmC,QAAnCA,IAAmC;AAAA,MAA7BC,WAA6B,QAA7BA,WAA6B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,kBAC1ClB,QAAQ,CAAC,KAAD,CADkC;AAAA,MACvEmB,UADuE;AAAA,MAC3DC,aAD2D;;AAAA,mBAEvCpB,QAAQ,CAAC,EAAD,CAF+B;AAAA,MAEvEqB,eAFuE;AAAA,MAEtDC,WAFsD;;AAI9E,MAAMC,UAAU,GAAGtB,WAAW,CAAC,UAACuB,CAAD,EAAO;AACpCJ,IAAAA,aAAa,CAAC,UAACK,OAAD;AAAA,aAAa,CAACA,OAAd;AAAA,KAAD,CAAb;AACAH,IAAAA,WAAW,CAACR,UAAD,CAAX;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBb,UAAnB;AACD,GAJ6B,EAI3B,CAACM,aAAD,CAJ2B,CAA9B;AAMA,SACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAQ,IAAA,OAAO,EAAEG,UAAjB;AAA6B,IAAA,SAAS,EAAC,YAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAME;AACE,IAAA,SAAS,2BAAoBF,eAAe,KAAKP,UAApB,IAAkCK,UAAlC,GAA+C,0BAA/C,GAA4E,EAAhG,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGCL,UAHD,CANF,CADF;AAmBD,CA7BM;;GAAMD,S;;KAAAA,S","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nfunction titleCase(string){\n  const y = string.split(\"_\");\n  y.forEach(function(value, i, array){\n    array[i] = array[i][0].toUpperCase() + array[i].slice(1);\n  });\n  return (y.join(\" \"));\n}\n\nexport const MapMarker = ({ output_key, key, name, coordinates, site_info }) => {\n  const [isInfoOpen, setIsInfoOpen] = useState(false);  \n  const [currentInfoOpen, setInfoOpen] = useState(\"\");  \n\n  const toggleInfo = useCallback((e) => {\n    setIsInfoOpen((wasOpen) => !wasOpen);    \n    setInfoOpen(output_key);  \n    console.log(\"name\",output_key)\n  }, [setIsInfoOpen]);\n\n  return (\n    <div className=\"map-marker-container\">\n      \n      <button onClick={toggleInfo} className=\"map-marker\">\n        {/* {text} */}\n        {/* <img onClick={toggleInfo} src=\"https://www.fultoncountyga.gov/-/media/Images/ICONS/COVID/coronavirus-testing-icon-01.ashx?h=300&w=300&la=en&hash=167F5E81A664D85DC93C64981F374240\" className=\"map-marker\" ></img> */}        \n      </button>\n      <div\n        className={`map-marker-info${currentInfoOpen === output_key && isInfoOpen ? ' map-marker-info--active' : ''}`}        \n      >   \n      {output_key}\n      {/* {Object.keys(site_info).map(key => (\n        <p>\n          {titleCase(key)}: {site_info[key]}\n        </p>\n      ))} */}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}