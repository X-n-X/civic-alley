{"ast":null,"code":"var _jsxFileName = \"/Users/benjamingordon/Documents/X&X/townie/components/GoogleMap/index.jsx\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport useSwr from 'swr';\nimport { MapMarker } from 'components/MapMarker';\nimport { MapMarkersContext } from 'components/MapMarkersContext';\nimport config from './mapConfig';\n\nconst fetcher = (...args) => fetch(...args).then(res => res.json());\n\nfunction getMapOptions() {\n  return config;\n}\n\nfunction getCenter(center) {\n  if (center == \"\") return {\n    lat: 40.635,\n    lng: -73.94\n  };else return center;\n}\n\nvar address = \"\";\n\nfunction setCoordinates(address) {\n  if (address !== \"\") {\n    //fetch(`https://maps.googleapis.com/maps/api/geocode/json?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_BOOTSTRAP_URL}&address=${this.state.address}`,{\n    fetch(`https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBe7_ta_1zNod6CsCJI6ssWk64kyO14HZo&address=${this.state.address}`, {\n      method: \"GET\",\n      dataType: \"JSON\" // headers: {\n      //   \"Content-Type\": \"application/json; charset=utf-8\",\n      // }\n\n    }).then(response => response.json()).then(data => {\n      this.setState({\n        coordinates: {\n          lat: data.results[0].geometry.location.lat,\n          lng: data.results[0].geometry.location.lng\n        }\n      });\n    });\n  }\n}\n\nexport function GoogleMap() {\n  const {\n    markers\n  } = useContext(MapMarkersContext);\n  return __jsx(\"div\", {\n    className: \"google-map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }), __jsx(\"label\", {\n    for: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, \"Enter address\"), __jsx(\"input\", {\n    name: \"address\",\n    value: address,\n    onChange: setCoordinates(address),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), __jsx(GoogleMapReact, {\n    bootstrapURLKeys: {\n      key: \"AIzaSyBe7_ta_1zNod6CsCJI6ssWk64kyO14HZo\"\n    } //bootstrapURLKeys={{ key: process.env.NEXT_PUBLIC_GOOGLE_MAPS_BOOTSTRAP_URL }}\n    ,\n    defaultCenter: getCenter(\"\"),\n    defaultZoom: 13,\n    options: getMapOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, markers.map(item => __jsx(MapMarker, {\n    key: item.key //text={item.name}            \n    ,\n    lat: item.coordinates.lat,\n    lng: item.coordinates.lng,\n    site_info: item.site_info,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/benjamingordon/Documents/X&X/townie/components/GoogleMap/index.jsx"],"names":["React","useContext","GoogleMapReact","useSwr","MapMarker","MapMarkersContext","config","fetcher","args","fetch","then","res","json","getMapOptions","getCenter","center","lat","lng","address","setCoordinates","state","method","dataType","response","data","setState","coordinates","results","geometry","location","GoogleMap","markers","key","map","item","site_info"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport useSwr from 'swr';\r\n\r\nimport { MapMarker } from 'components/MapMarker';\r\nimport { MapMarkersContext } from 'components/MapMarkersContext';\r\n\r\nimport config from './mapConfig';\r\n\r\nconst fetcher = (...args) => fetch(...args).then(res => res.json())\r\n\r\nfunction getMapOptions() {\r\n  return config;\r\n}\r\n\r\nfunction getCenter(center) {\r\n  if(center == \"\")\r\n    return {lat: 40.635,lng: -73.94};\r\n  else\r\n    return center;\r\n}\r\n\r\nvar address = \"\";\r\n\r\nfunction setCoordinates(address){    \r\n  if(address !== \"\"){             \r\n      //fetch(`https://maps.googleapis.com/maps/api/geocode/json?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_BOOTSTRAP_URL}&address=${this.state.address}`,{\r\n      fetch(`https://maps.googleapis.com/maps/api/geocode/json?key=AIzaSyBe7_ta_1zNod6CsCJI6ssWk64kyO14HZo&address=${this.state.address}`,{\r\n          method: \"GET\",\r\n          dataType: \"JSON\",\r\n          // headers: {\r\n          //   \"Content-Type\": \"application/json; charset=utf-8\",\r\n          // }\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {           \r\n        this.setState({ coordinates: {lat: data.results[0].geometry.location.lat, lng: data.results[0].geometry.location.lng}});          \r\n      });\r\n  }\r\n}\r\n\r\nexport function GoogleMap() {  \r\n  const { markers } = useContext(MapMarkersContext); \r\n   \r\n\r\n  return (\r\n    <div className=\"google-map-container\">\r\n      <br></br>\r\n      {/* <input value={this.state.address} onChange={this.setCoordinates}></input> */}\r\n      <label for=\"address\">Enter address</label>\r\n      <input name =\"address\" value = {address} onChange={setCoordinates(address)}></input>\r\n      <GoogleMapReact\r\n        bootstrapURLKeys={{ key: \"AIzaSyBe7_ta_1zNod6CsCJI6ssWk64kyO14HZo\" }}\r\n        //bootstrapURLKeys={{ key: process.env.NEXT_PUBLIC_GOOGLE_MAPS_BOOTSTRAP_URL }}\r\n        defaultCenter={getCenter(\"\")}\r\n        defaultZoom={13}\r\n        options={getMapOptions}\r\n      >\r\n       {markers.map((item) => (\r\n          <MapMarker\r\n            key={item.key}\r\n            //text={item.name}            \r\n            lat={ item.coordinates.lat}\r\n            lng={ item.coordinates.lng}\r\n            site_info= {item.site_info}             \r\n          />\r\n        ))}\r\n      </GoogleMapReact>      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}